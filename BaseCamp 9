/**
 *Submitted for verification at goerli.basescan.org on 2023-12-04
*/

// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)


/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/10-new.sol

// Create an Ownable contract called AddressBook. In it include:
contract AddressBook is Ownable {

    error ContactNotFound(uint _id);

    struct Contact {
        uint id;
        string firstName;
        string lastName;
        uint[] phoneNumbers;
    }
    Contact[] public contacts;

    // The addContact function should be usable only by the owner of the contract.
    // It should take in the necessary arguments to add a given contact's information to contacts
    function addContact(
        uint _id,
        string calldata firstName,
        string calldata lastName,
        uint[] calldata phoneNumbers
    ) public onlyOwner {
        Contact memory _newContact = Contact(_id, firstName, lastName, phoneNumbers);
        contacts.push(_newContact);
    }

    // The deleteContact function should be usable only by the owner and
    // should delete the contact under the supplied _id number.
    // If the _id is not found, it should revert with an error called ContactNotFound
    // with the supplied id number.
    function deleteContact(uint _id) public onlyOwner {
        for (uint i; i < contacts.length; i++) {
            if (contacts[i].id == _id) {
                delete contacts[i];
                return;
            }
        }
        revert ContactNotFound(_id);
    }

    // The getContact function returns the contact information of the supplied _id number.
    // It reverts with ContactNotFound if the contact isn't present.
    function getContact(uint _id) public view returns (Contact memory) {
        for (uint i; i < contacts.length; i++) {
            if (_id == contacts[i].id) {
                return contacts[i];
            }
        }
        revert ContactNotFound(_id);
    }

    function getAllContacts() public view returns (Contact[] memory) {
        return contacts;
    }

}

contract AddressBookFactory {
    function deploy() public returns (address) {
        AddressBook newContract = new AddressBook();
        return address(newContract);
    }
}
